name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

    build:

      runs-on: ubuntu-latest
  
      steps:
        - uses: actions/checkout@v4
        - name: Install dependencies
          run: |
            # Update package lists
            sudo apt-get update
            # Install required packages
            sudo apt-get install -y \
              build-essential \
              git \
              uuid-dev \
              acpica-tools \
              nasm \
              python3 \
              python3-pip \
              curl
            # Create symbolic link for python
            sudo ln -s $(which python3) /usr/local/bin/python
            # Create artifacts folder
            mkdir artifacts
        - name: Clone latest EDK2 release
          run: |
            # Get latest release
            LATEST_RELEASE=$(curl -s "https://api.github.com/repos/tianocore/edk2/releases/latest" | grep -o '"tag_name": "[^"]*' | sed 's/"tag_name": "//')
            export LATEST_RELEASE
            echo "Latest Release: $LATEST_RELEASE"
            # Clone EDK2 repository
            git clone --depth 1 "https://github.com/tianocore/edk2.git" -b "$LATEST_RELEASE" edk2
        - name: Update submodules
          working-directory: edk2
          run: |
            # Update submodules
            git submodule update --init
        - name: Run tests
          working-directory: edk2
          run: |
            # Source edksetup script
            . ./edksetup.sh
            # Run tests
            make -C BaseTools
        - name: Build Shell
          working-directory: edk2
          run: |
            # Source edksetup script
            . ./edksetup.sh
            IFS=', ' read -r -a TARGETS <<< "$TARGETS"
            IFS=', ' read -r -a ARCHS <<< "$ARCHS"
            IFS=', ' read -r -a DSC <<< "$DSC"
            for target in "${TARGETS[@]}"; do
              for i in "${!ARCHS[@]}"; do
                arch=${ARCHS[$i]}
                dsc=${DSC[$i]}
                echo "Building OVMF for $arch $target $dsc"
                build -a "$arch" -b "$target" -t GCC5 -p OvmfPkg/OvmfPkg"$dsc".dsc -DSECURE_BOOT_ENABLE=TRUE
                cd ..
                mkdir -p artifacts/"$arch"/"$target"
                cp edk2/Build/Ovmf"$dsc"/"$target"_GCC5/FV/OVMF_CODE.fd artifacts/"$arch"/"$target"
                cp edk2/Build/Ovmf"$dsc"/"$target"_GCC5/FV/OVMF_VARS.fd artifacts/"$arch"/"$target"
                cp edk2/Build/Ovmf"$dsc"/"$target"_GCC5/FV/OVMF.fd artifacts/"$arch"/"$target"
                echo "OVMF for $arch $target $dsc built successfully"
                echo "Compressing artifacts to zip"
                zip -r -j OVMF-"$arch"-"$target".zip artifacts/"$arch"/"$target"
                cd edk2
              done
            done
            cd ..
            mkdir -p artifacts/zip
            mv OVMF-*.zip artifacts/zip
          env:
            ARCHS: IA32,X64
            TARGETS: RELEASE,DEBUG
            DSC: Ia32,X64
        - name: Build OVMF
          working-directory: edk2
          run: |
            # Source edksetup script
            . ./edksetup.sh
            IFS=', ' read -r -a TARGETS <<< "$TARGETS"
            IFS=', ' read -r -a ARCHS <<< "$ARCHS"
            IFS=', ' read -r -a DSC <<< "$DSC"
            IFS=', ' read -r -a GUID <<< "$GUID"
            for target in "${TARGETS[@]}"; do
              for i in "${!ARCHS[@]}"; do
                arch=${ARCHS[$i]}
                dsc=${DSC[$i]}
                echo "Building Shell for $arch $target $dsc"
                build -a "$arch" -b "$target" -t GCC5 -p ShellPkg/ShellPkg.dsc
                cd ..
                rm -rf artifacts/"$arch"/"$target"
                mkdir -p artifacts/"$arch"/"$target"
                cp edk2/Build/Shell/"$target"_GCC5/"$arch"/Shell_"$GUID".efi artifacts/"$arch"/"$target"/BOOT"$arch".efi
                echo "Shell for $arch $target $dsc built successfully"
                echo "Compressing artifacts to zip"
                zip -r -j Shell-"$arch"-"$target".zip artifacts/"$arch"/"$target"
                cd edk2
              done
            done
            cd ..
            mv Shell-*.zip artifacts/zip
          env:
            ARCHS: IA32,X64
            TARGETS: RELEASE,DEBUG
            DSC: Ia32,X64
            GUID: EA4BB293-2D7F-4456-A681-1F22F42CD0BC
        - name: Upload artifacts
          uses: actions/upload-artifact@v2
          with:
            name: OVMF
            path: artifacts/zip
            if-no-files-found: error
            retention-days: 1
  
        # Create Release with information from tags
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: "EDK2 ${{ env.LATEST_RELEASE }} ${{ github.ref }}"
            body: |
              Changes in this Release
              # Add details about the changes here
            draft: false  # Set to true for draft releases
            prerelease: false  # Set to true for pre-release versions
  
        # Upload the artifact zip folder to the release
        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: artifacts/zip  # Path to the folder containing zip files
            asset_name: artifacts.zip  # Name of the uploaded zip containing all artifacts
            asset_content_type: application/zip
  